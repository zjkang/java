Bean


1. @SpringBootApplication: package component scan, auto config, config
auto confi: jar dependency added in porm.xml
ComponentScan: scan packages
Configuration: bean definition

2. Stereotype annotation
@RestController/@Controller
@Component
@Service
@Repository


3. @Configuration
@Bean: use java based configuration

4. @Autowired, @Qualifier, @Primary
@Autowired: one dependency injection
@Qualifier: @Qualifier("studentServiceImpl")

5. @Lazy

6. @Value: load from property file: application.properties
@Value(${main.host})

7. @PropertySouce("classpath:...."): property file path

8. @ConfigurationProperties(prefix = "mail")
map property to single class

9. @Data: auto config get, set method, toString

10. @Profile
switch dev/staging/prod env for configuration properties
need to specify which one is active in properties

11. Scope
singleton, prototype,

-------------------------------------
Rest API related Annotations: expose the endpoint

@RestController == @Controller & @Reponsebody

@RequestMapping("/")
@RequestMapping("/students")
@RequestMapping(value = "save", method = RequestMethod.POST, consumes = "", produces = "")

@GetMapping("/user")
@PostMapping("/user")
@PutMapping
@DelteMapping

@PathVariable
the information is mandary one in request url {id}
@GetMapping("/users/{id1}")
public String pathTest(@PathVariable("id1") String id)

@RequestParam: localhost:8080//users/query?id=111; localhost:8080//users/query?id=111&email=123@abc.com
Request Param can be optional
@GetMapping("/users/query)
public String requestTest(@RequestParam(name = "id", required = false, defaultValue = "") String id, @RequestParam String email))

@RequestBody: e.g. payload in POST request
e.g.
@PostMapping
public Employee save(@RequestBoday Employee employee)

@RestControllerAdvice: AOP, Create advisor for custom exception
@ExceptionHandler
e.g.
@ControllerAdvice
public class RestResponseEntityExceptionHandler 
  extends ResponseEntityExceptionHandler {

  @ExceptionHandler(EmployeeNotFoundException.class)
  @ResponseBody
  @ResponseStatus(HttpStatus.NOT_FOUND)
  public ErrorMessage employeeNotFoundExceptionHandler(EmployeeNotFoundException e) {
  }

  @ExceptionHandler(Exception.class)
  @ResponseBody
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public ErrorMessage exceptionHandler(Exception e) {
  }
}

Content negotiation: control what type of data to return
UIR passed with parameters
  mediaType=xml, return xml
  mediaType=json, return json
@Configuration
public class WebCong implements WebMvcConfigurer {
  @Override
  public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
    configurer.favorParameter(true)
      .parameterName("mediaType")
      .defaultContentType(MediaType.APPLICATION_JSON)
      .mediaType("xml", MediaType.APPLICATION_JSON)
      .mediaType("json", MediaType.APPLICATION_XML);
  }
}
Note: add xml dependency to pom.xml

Data Filter for restful service for fields
@JsonIgnore: On a field; it can ignore a specific field when response returns
@JsonIgnoreProperties: On a class; ({"department", "other"})

API versioning
1. add into path variable uri with version as resource: /v1/tweet; /v2/tweet
2. request params: /tweet?version=v1
3. http header:

In controller method, we can return
ResponseEntity<Class> not directly return Class
e.g., return new ResponseEntity<>(productId, HttpStatus.CREATED)

@Log4j2 for log


-------------------------------------
Spring Data JPA related annotations

ORM: object related mapping
caller workflow:
 - Code
 - JPA layer: define a specification: hibernate
 - JDBC API
 - JDBC Driver
 - DB

Add dependency into pom.xml
Repository extends JpaRepository<Entity, Id>
@Entity: POJO class; tell jpa this is entity to perform db operations
@Table(name = "STUDENT_TBL")

@Id: primary key
@Column(name = "PRODUCT_NAME")
@GeneratorValue(strategy = GenerationType.AUTO)
@GeneratorType

@Transactional(isolation = "", propagation = "")

@OneToMany(targetEntity = )

Noe: the other way by using entityManager


-------------------------------------
Lombok: for getter/setter, constructor, builer

@Data
  getter/setter, required Args constriuctor, toString, Equals/HashCode, Value
@AllArgsConstructor
@NoArgsConstructor
@Buidler

-------------------------------------
Security related Annotations

Auth2 authentication: Authentication Code (JWT token Json web token)
header, body, signature (credentials)
Client send request with code

Okta




-------------------------------------
Cached related Annotations

-------------------------------------
AOP Aspect Oriented related Annotations
















































