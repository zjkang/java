http://blog.itpub.net/69908877/viewspace-2676272/
https://www.baeldung.com/intro-to-project-lombok


代码可读性，可调试性低
在代码中使用了Lombok，确实可以帮忙减少很多代码，因为Lombok会帮忙自动生成很多代码。
但是这些代码是要在编译阶段才会生成的，所以在开发的过程中，其实很多代码其实是缺失的。
在代码中大量使用Lombok，就导致代码的可读性会低很多，而且也会给代码调试带来一定的问题。
比如，我们想要知道某个类中的某个属性的getter方法都被哪些类引用的话，就没那么简单了。


有坑
因为Lombok使代码开发非常简便，这就使得部分开发者对其产生过度依赖。
在使用Lombok过程中，如果对于各种注解的底层原理不理解的话，很容易产生意想不到的结果。
举一个简单的例子，我们知道，当我们使用@Data定义一个类的时候，会自动帮我们生成equals()方法 。
但是如果只使用了@Data，而不使用@EqualsAndHashCode(callSuper=true)的话，
会默认是@EqualsAndHashCode(callSuper=false),
这时候生成的equals()方法只会比较子类的属性，不会考虑从父类继承的属性，无论父类属性访问权限是否开放。
这就可能得到意想不到的结果。



