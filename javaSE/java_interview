https://www.edureka.co/blog/interview-questions/java-interview-questions/#JDBC


https://segmentfault.com/a/1190000022654702
https://blog.51cto.com/u_14623707/2466423

Java 8 的主要新特性
Lambda 表达式
Lambda 允许把函数作为一个方法的参数传递进方法中。
作用：解决 Java 被诟病的匿名内部类的问题。
接口中可增加了默认方法
作用：在接口中也可以有实现方法了。
HashMap 底层数据结构的变化
java 8 之前，HashMap 底层的数据结构是数组+链表实现的， Java 8 之后是数组+链表+红黑树实现的，当链表的长度超过 8 之后，会转换成红黑树。
作用：解决因哈希冲突导致的链表过长，查询效率低的问题。
Stream API
新添加 Stream API (java.util.stream)，把真正函数式编程的风格引入 Java。
提供一个新的 JavaScript 引擎
Java 8 提供了一个新的 Nashorn JavaScript 引擎，它允许在 JVM 上运行特定的 JavaScript 应用。
作用：解决日益增长的 Java 跟 JS 交互混合的需求。

Java11相对Java8，在语法上的新特性并不多。主要有：
本地变量类型推断
HttpClient
Collection增强
Stream增强
Optional增强
String增强
InputStream增强

----------------------------------------------------------------------
Basic Java  Interview Questions
 Enumeration and Iterator
   https://www.tutorialspoint.com/difference-between-iterator-and-enumeration-in-java 
 Q13. What is the importance of reflection in Java?
  Reflection is a runtime API for inspecting and changing the behavior of methods, classes, 
  and interfaces. Java Reflection is a powerful tool that can be really beneficial. 
  Java Reflection allows you to analyze classes, interfaces, fields, and methods 
  during runtime without knowing what they are called at compile time. 
  Reflection can also be used to create new objects, call methods, and get/set field values. 
  External, user-defined classes can be used by creating instances of extensibility objects 
  with their fully-qualified names. Debuggers can also use reflection to examine private 
  members of classes.
  https://www.baeldung.com/java-reflection
  @Test
  public void givenClass_whenInstantiatesObjectsAtRuntime_thenCorrect() {
      Class<?> birdClass = Class.forName("com.baeldung.reflection.Bird");
      Constructor<?> cons1 = birdClass.getConstructor();
      Constructor<?> cons2 = birdClass.getConstructor(String.class);
      Constructor<?> cons3 = birdClass.getConstructor(String.class,
        boolean.class);

      Bird bird1 = (Bird) cons1.newInstance();
      Bird bird2 = (Bird) cons2.newInstance("Weaver bird");
      Bird bird3 = (Bird) cons3.newInstance("dove", true);

      assertEquals("bird", bird1.getName());
      assertEquals("Weaver bird", bird2.getName());
      assertEquals("dove", bird3.getName());

      assertFalse(bird1.walks());
      assertTrue(bird3.walks());
  }
  
  Q24. What is JIT compiler in Java?
  https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html
  JIT stands for Just-In-Time compiler in Java. It is a program that helps in converting 
  the Java bytecode into instructions that are sent directly to the processor. By default, 
  the JIT compiler is enabled in Java and is activated whenever a Java method is invoked. 
  The JIT compiler then compiles the bytecode of the invoked method into native machine code, 
  compiling it “just in time” to execute. Once the method has been compiled, the JVM summons the compiled code of that method directly rather than interpreting it. This is why it is often responsible for the performance optimization of Java applications at the run time.
  
  Q41. What is a classloader in Java?
  The Java ClassLoader is a subset of JVM (Java Virtual Machine) that is responsible for loading the class files. 
  Whenever a Java program is executed it is first loaded by the classloader. 
  Java provides three built-in classloaders:
  Bootstrap ClassLoader
  Extension ClassLoader
  System/Application ClassLoader
  
Java OOPs Interview Questions
   Difference between abstract class and interface
   https://www.digitalocean.com/community/tutorials/java-8-interface-changes-static-method-default-method
   
   Q12. What is an association?
   https://blog.csdn.net/libing1991_/article/details/78821947#:~:text=Association%EF%BC%88%E5%85%B3%E8%81%94%EF%BC%89,%E6%9C%8D%E5%8A%A1%E6%9D%A5%E8%BF%9B%E8%A1%8C%E4%BA%A4%E6%B5%81%E5%90%88%E4%BD%9C%E3%80%82
   
JDBC Interview Questions
Spring Interview Questions
Hibernate Interview Questions
JSP Interview Questions
Java Exception and Thread Interview Questions


Override hashCode and equals

@Override
public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Student student = (Student) o;
    return age == student.age && number.equals(student.number) && category.equals(student.category);
}

@Override
public int hashCode() {
    return Objects.hash(number, category, age);
}


----------------------------------------------
- java为何要设计Cloneable这个接口
https://www.zhihu.com/question/35240637
https://blog.csdn.net/qq_37113604/article/details/81168224

- 当需要返回一个不可修改的list的时候
Collections.unmodifiableList(list);

static class UnmodifiableList<E> extends UnmodifiableCollection<E>
                                  implements List<E>
when it implments List<E>, all modify method, e.g., add
public void add(int index, E element) {
   throw new UnsupportedOperationException();
}

----------------------------------------------
jdbc
https://www.jianshu.com/p/0eb44feeb54e

- What are the steps to connect to a database in java?
Registering the driver class
Creating connection
Creating statement
Executing queries
Closing connection

----------------------------------------------
hibernate
https://www.bilibili.com/video/BV17V41177Br/?spm_id_from=333.337.search-card.all.click&vd_source=749a5a1f86706ea376033bbc264880b5

persistance & ORM


----------------------------------------------
- enumeration using enum
- annotation
  metadata, used at compilier time
  @Retention(RetentionPolicy.RUNTIME) // when the annotation applies
  @Target(ElementType.TYPE) // what type the annotation applies to
  public @interface MarkerAnnotation {
      int value();
  }
- serialization
  implement serializable
  static long serializeID
  transient: not want field to be serialized/deserialized
- concurrency and thread
  inherit from Thread; or implement Runnable interface
  lock (monitor) and synchronization, put lock on object
- autoboxing and unboxing
  Integer iObj = Integer.valueOf(i);
  int i = iObj;
- I/O stream
  input stream to read / output stream to write
  inputStream/outStream (byte); Reader/Writer (char)
  byte stream vs character stream
- JDBC
- Generics Type
  public class SingleGenericHolder<T> {
     T obj;
     SingleGenericHolder(T obj) {
       this.obj = obj;
     }
     public T getObject() {
       return obj;
     }
  }
 - String handling
   String.format()
 - java.lang (not need to import the package)
   java.util (not automatically import)
     Collection interface
     Collections
 - ??? Networking in Java
   Socket, URL
 - images in Java
 - Java concurrency util
   Executor: interface
   ExecutorService: async execution framework 
   Future
   completable future, callable
- Regrex
- Non blocking IO (NIO)

  

----------------------
 - springboot: annotaion to map restul api to function
   https://www.oschina.net/translate/using-the-spring-requestmapping-annotation
   @GetMapping("/departments/{id}")
   @PathVariable("id") Long id
   @Requestbody Department department // json to entity
   


Collection VS Collections
fail fast vs fail safe: https://zhuanlan.zhihu.com/p/37476508


  


















